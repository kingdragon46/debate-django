# Generated by Django 3.1.7 on 2021-08-14 04:32

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserRoles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, null=True, unique=True)),
                ('data', models.JSONField(blank=True, null=True, verbose_name='Page Ids')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True, verbose_name='email address')),
                ('phone', models.CharField(max_length=10, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Phone number must be entered in the format +919999999999. Up to 10 digits allowed.', regex='^\\+?1?\\d{9,10}$')], verbose_name='Phone')),
                ('birth_date', models.DateField(null=True, verbose_name='DOB')),
                ('gender', models.CharField(choices=[('0', 'Male'), ('1', 'Female'), ('2', 'Transgender'), ('3', 'Other')], max_length=50, null=True, verbose_name='Gender')),
                ('addressline1', models.CharField(max_length=50, null=True)),
                ('addressline2', models.CharField(blank=True, max_length=50, null=True)),
                ('country', models.CharField(blank=True, max_length=50, null=True)),
                ('city_m', models.CharField(blank=True, max_length=50, null=True)),
                ('state_m', models.CharField(blank=True, max_length=50, null=True)),
                ('city', models.CharField(max_length=50, null=True, verbose_name='City')),
                ('pincode', models.CharField(max_length=6, null=True, verbose_name='Pincode')),
                ('picture', models.ImageField(blank=True, default='/static/assets/images/user/avatar-1.jpg', null=True, upload_to='')),
                ('user_creation_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date & Time')),
                ('user_type', models.CharField(choices=[('1', 'Volunteer'), ('2', 'Employee'), ('3', 'Donor'), ('4', 'Beneficiary')], max_length=50, null=True, verbose_name='User Type')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('pageroles', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='authentication.userroles', verbose_name='Roles')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
